function init(self)
	msg.post(".", "acquire_input_focus")
	self.moving = false
	self.firing = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0,1,0)
	self.speed = 150
end

function final(self)
	msg.post(".", "release_input_focus")
end

function reset_movement(self)
	self.input.x = 0
	self.input.y = 0
	self.moving = false
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		if pos.x < 0 then
			pos.x = 0
		end
		if pos.y < 0 then
			pos.y = 0
		end
		go.set_position(pos)
	end
	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }
		factory.create("#rocketfactory", nil, rot, props)
	end
		-- do things
	self.firing = false
	reset_movement(self)
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	end

	if action.pressed then
		update_sprite(action_id, action)
	end

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function update_sprite(action_id)
	if action_id == hash("up") then
		sprite.play_flipbook("#sprite", "player-up")
	elseif action_id == hash("down") then
		sprite.play_flipbook("#sprite", "player-down")
	elseif action_id == hash("left") then
		sprite.play_flipbook("#sprite", "player-left")
	elseif action_id == hash("right") then
		sprite.play_flipbook("#sprite", "player-right")
	end
end

function fixed_update(self, dt)
end

function on_message(self, message_id, message, sender)
end

function on_reload(self)
end
